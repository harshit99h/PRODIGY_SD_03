import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.stream.Collectors;

class Contact {
    private String name;
    private String phoneNumber;
    private String email;

    public Contact(String name, String phoneNumber, String email) {
        this.name = name;
        this.phoneNumber = phoneNumber;
        this.email = email;
    }

    public String getName() {
        return name;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public String getEmail() {
        return email;
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Phone: " + phoneNumber + ", Email: " + email;
    }

    public String toCSV() {
        return name + "," + phoneNumber + "," + email;
    }

    public static Contact fromCSV(String csv) {
        String[] parts = csv.split(",");
        if (parts.length == 3) {
            return new Contact(parts[0], parts[1], parts[2]);
        } else {
            throw new IllegalArgumentException("Invalid CSV format");
        }
    }
}

class ContactManager {
    private static final String FILE_NAME = "contacts.txt";
    private List<Contact> contacts;

    public ContactManager() {
        contacts = new ArrayList<>();
        loadContacts();
    }

    private void loadContacts() {
        try {
            contacts = Files.lines(Paths.get(FILE_NAME))
                    .map(Contact::fromCSV)
                    .collect(Collectors.toList());
        } catch (IOException e) {
            System.out.println("No previous contacts found. Starting with an empty list.");
        }
    }

    private void saveContacts() {
        try {
            Files.write(Paths.get(FILE_NAME), contacts.stream()
                    .map(Contact::toCSV)
                    .collect(Collectors.toList()));
        } catch (IOException e) {
            System.out.println("Error saving contacts: " + e.getMessage());
        }
    }

    public void addContact(String name, String phoneNumber, String email) {
        contacts.add(new Contact(name, phoneNumber, email));
        saveContacts();
    }

    public List<Contact> getContacts() {
        return contacts;
    }

    public void editContact(int index, String name, String phoneNumber, String email) {
        if (index >= 0 && index < contacts.size()) {
            contacts.set(index, new Contact(name, phoneNumber, email));
            saveContacts();
        } else {
            throw new IndexOutOfBoundsException("Invalid contact index.");
        }
    }

    public void deleteContact(int index) {
        if (index >= 0 && index < contacts.size()) {
            contacts.remove(index);
            saveContacts();
        } else {
            throw new IndexOutOfBoundsException("Invalid contact index.");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        ContactManager manager = new ContactManager();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nContact Manager");
            System.out.println("1. Add Contact");
            System.out.println("2. View Contacts");
            System.out.println("3. Edit Contact");
            System.out.println("4. Delete Contact");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            String choice = scanner.nextLine();

            try {
                switch (choice) {
                    case "1":
                        System.out.print("Enter name: ");
                        String name = scanner.nextLine();
                        System.out.print("Enter phone number: ");
                        String phoneNumber = scanner.nextLine();
                        System.out.print("Enter email: ");
                        String email = scanner.nextLine();
                        manager.addContact(name, phoneNumber, email);
                        break;
                    case "2":
                        List<Contact> contacts = manager.getContacts();
                        if (contacts.isEmpty()) {
                            System.out.println("No contacts found.");
                        } else {
                            for (int i = 0; i < contacts.size(); i++) {
                                System.out.println((i + 1) + ". " + contacts.get(i));
                            }
                        }
                        break;
                    case "3":
                        System.out.print("Enter contact number to edit: ");
                        int editIndex = Integer.parseInt(scanner.nextLine()) - 1;
                        System.out.print("Enter new name: ");
                        name = scanner.nextLine();
                        System.out.print("Enter new phone number: ");
                        phoneNumber = scanner.nextLine();
                        System.out.print("Enter new email: ");
                        email = scanner.nextLine();
                        manager.editContact(editIndex, name, phoneNumber, email);
                        break;
                    case "4":
                        System.out.print("Enter contact number to delete: ");
                        int deleteIndex = Integer.parseInt(scanner.nextLine()) - 1;
                        manager.deleteContact(deleteIndex);
                        break;
                    case "5":
                        System.out.println("Exiting...");
                        return;
                    default:
                        System.out.println("Invalid option. Try again.");
                }
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }
}
